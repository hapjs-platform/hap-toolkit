<!-- 
  Copyright (c) 2021-present, the hapjs-platform Project Contributors
  SPDX-License-Identifier: Apache-2.0
-->

<template>
  <div class="doc-page">
    <div class="page-title-wrap">
      <text class="page-title">{{componentName}}</text>
    </div>
    <div class="audio-content">
      <text>调节音量大小：{{valumeStatus}}</text>
    </div>
    <slider min="0" max="10" step="1" value="{{volume}}" onchange="adjustVolume"></slider>
    <div class="audio-content" style="flex-direction: row">
      <label target="checkbox1">显示/隐藏音频播放通知：</label>
      <input id="checkbox1" type="checkbox" checked="true" onchange="changeAudioNotificationVisibility"/>
    </div>
    <div class="audio-content">
      <text>自定义组件：</text>
      <div class="custom-audio">
        <div class="player-content" onclick="playerStart">
          <image show="{{playerStatus}}" src="./start.png"></image>
          <image show="{{!playerStatus}}" src="./pause.png"></image>
        </div>
        <text class="duration-content">{{totalTime}}/{{spendTime}}</text>
        <!-- 使用slider组件模拟播放进度 -->
        <slider class="audio-slider" min="0" max="{{duration}}" step="1" value="{{currentTime}}" onchange="sliderChange"></slider>
      </div>
    </div>
    <div class="btn-container">
      <div class="btn-content">
        <text class="txt">当前状态：{{status}}</text>
      </div>
      <input type="button" class="btn" onclick="stopAudio" value="停止" />
    </div>
  </div>
</template>

<style lang="sass">
  @import '../../../common/css/common.css';

  .audio-content {
    flex-direction: column;
    padding: 20px;
    margin-bottom: 50px;
    .audio {
      height: 120px;
      flex: 1;
    }
  }
  .btn-container {
    margin-bottom: 50px;
    margin-right: 60px;
    margin-left: 60px;
    flex-direction: column;
  }

  .btn-content {
    flex-direction: column;
    background-color: #ffffff;
    padding: 30px;
    margin-bottom: 100px;
    align-items: center;
  }
  .custom-audio {
    flex-direction: row;
    background-color: #dddddd;
    .player-content {
      height: 120px;
      width: 100px;
      justify-content: center;
      align-items: center;
      image {
        height: 40px;
        width: 40px;
      }
    }
    .duration-content {
      height: 120px;
      text-align: center;
      font-size: 25px;
      width: 200px;
      color: #000000;
    }
    .audio-slider {
      color: #FFFFFF;
      padding-left: 20px;
      width: 100%;
    }
  }
</style>

<script>
  import audio from '@system.audio'

  export default {
    private: {
      componentName: 'Audio',
      audioSrc: 'http://www.w3school.com.cn/i/song.mp3',
      duration: 100,
      spendTime: '00:00',
      totalTime: '00:00',
      currentTime: 0,
      volume: 0,
      valumeStatus: 0,
      status: 'stop',
      playerStatus: true
    },
    onInit () {
      this.$page.setTitleBar({text: 'Audio'})
      audio.src = this.audioSrc
      // 自动播放
      audio.autoplay = false
      this.volume = parseInt(audio.volume*10)
      this.valumeStatus = audio.volume
      this.audioInit()
    },
    audioInit () {
      const self = this
      // 播放触发
      audio.onloadeddata = function () {
        // 循环播放
        audio.loop = false
        self.duration = audio.duration
        self.totalTime = self.formatTime(audio.duration)
      }
      // 添加监听
      // currentTime变化时触发
      audio.ontimeupdate = function () {
        self.updateAudio()
      }
      // 暂停时触发
      audio.onpause = function () {
        self.status = 'audio pause'
        console.info('pause')
      }
      // 播放完毕触发
      audio.onended = function () {
        // 图标回到可播放状态
        self.status = 'audio end'
        self.playerStatus = true
      }
      // 出错时触发
      audio.onerror = function () {
        self.status = 'audio error'
        console.info('error')
      }
      // 播放时长变化触发
      audio.ondurationchange = function () {
        console.info('change')
      }
      // 播放时触发
      audio.onplay = function () {
        self.status = 'audio play'
        self.playerStatus = false
      }
      // 停止时触发
      audio.onstop = function () {
        self.currentTime = 0
        self.spendTime = '00:00'
        self.status = 'audio stop'
        self.playerStatus = true
      }
    },
    playerStart () {
      if (this.playerStatus) {
        // 开始播放
        audio.play()
      } else {
        // 暂停播放
        audio.pause()
      }
      this.playerStatus = !this.playerStatus
    },
    stopAudio () {
      if (!this.playerStatus) {
        audio.stop()
      }
    },
    updateAudio () {
      // 更新播放时间
      const time = audio.currentTime
      this.currentTime = time
      this.spendTime = this.formatTime(time)
    },
    sliderChange (e) {
      const value = e.progress - audio.currentTime
      // 相差三秒则判定为拖动进度，同时反应到原生audio组件上
      if(value > 1 || value < -1) {
        audio.currentTime = e.progress
        // 拖动后会触发自动播放，显示播放中按钮
        this.playerStatus = false
      }
    },
    adjustVolume (e) {
      audio.volume = e.progress/10
      this.valumeStatus = e.progress/10
    },
    changeAudioNotificationVisibility (e) {
      audio.notificationVisible = e.checked
    },
    // 格式化返回时间
    formatTime (time) {
      const s = parseInt(time)
      if(!s) {return '00:00'}
      const m = parseInt(s/60)
      const se = s%60
      const min = m >= 10 ? m : '0' + m
      const sec = se >= 10 ? se : '0' + se
      return min + ':' + sec
    }
  }
</script>
